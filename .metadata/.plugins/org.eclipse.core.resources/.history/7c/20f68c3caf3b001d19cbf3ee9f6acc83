package br.inatel.labs.labrest.server.controller;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.reactive.server.WebTestClient;

import br.inatel.labs.labrest.server.model.Curso;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class CursoControllerTest {

	@Autowired
	private WebTestClient webTestClient;

	@Test
	void deveListarCursos() {
		webTestClient.get().uri("/curso").exchange().expectHeader().contentType(MediaType.APPLICATION_JSON)
				.expectStatus().isOk().expectBody().returnResult();

	}
	
	@Test
	void dadoCursoIdValido_quandoGetCursoPeloId_entaoRespondeComCursoValido() {
		Long cursoIdValido = 1L;
		
		Curso resultCurso = webTestClient.get()
		.uri("/curso/" + cursoIdValido)
		.exchange()
		.expectBody(Curso.class)
		.returnResult().getResponseBody();
		
		
		assertNotNull(resultCurso);
		assertEquals(resultCurso.getId(), cursoIdValido);
	}
	
	@Test
	void dadoCursoIdInvalido_quandoGetCursoPeloId_entaoRespondeComNotFound() {
		Long cursoIdInvalido = 16L;
		
		Curso resultCurso = webTestClient.get()
		.uri("/curso/" + cursoIdInvalido)
		.exchange()
.expectStatus().isNotFound();
		
		
		assertNotNull(resultCurso);
		assertEquals(resultCurso.getId(), cursoIdValido);
	}

}